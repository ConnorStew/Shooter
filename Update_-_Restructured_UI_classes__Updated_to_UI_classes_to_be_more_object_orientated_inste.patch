Index: src/main/java/ui/UI.java
===================================================================
--- src/main/java/ui/UI.java	(revision 01d0fbe325e8ed492a3efa370aeafc83ff5036aa)
+++ src/main/java/ui/UI.java	(revision 01d0fbe325e8ed492a3efa370aeafc83ff5036aa)
@@ -1,133 +0,0 @@
-package ui;
-
-import com.badlogic.gdx.Game;
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.graphics.Color;
-import com.badlogic.gdx.graphics.Pixmap;
-import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.g2d.BitmapFont;
-import com.badlogic.gdx.graphics.g2d.Sprite;
-import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
-import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator.FreeTypeFontParameter;
-import com.badlogic.gdx.scenes.scene2d.ui.Label;
-import com.badlogic.gdx.scenes.scene2d.ui.List;
-import com.badlogic.gdx.scenes.scene2d.ui.ScrollPane;
-import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
-import com.badlogic.gdx.scenes.scene2d.ui.TextField.TextFieldStyle;
-import com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable;
-
-/**
- * Handles displaying the current screen in the game.
- * @author Connor Stewart
- */
-public class UI extends Game {
-
-	/** Singleton instance of the main game. */
-	private static final UI instance = new UI();
-	
-	/** The style for buttons within the game. */
-	static TextButton.TextButtonStyle buttonStyle;
-	
-	/** The style for labels within the game. */
-	static Label.LabelStyle labelStyle;
-	
-	/** The style for lists within the game. */
-	static List.ListStyle lstStyle;
-	
-	/** The style for text fields within the game. */
-	static TextFieldStyle tfs;
-	
-	/** The style for scroll panes within the game. */
-	static ScrollPane.ScrollPaneStyle scrStyle;
-
-	/** The font for use within the game. */
-	static BitmapFont font;
-	
-	/** {@link #getInstance()} should be used to obtain an instance of this class.  */
-	private UI(){};
-	
-	public void create() {
-		loadFont();
-		initialiseStyles();
-		
-		//default to the menu screen
-		setScreen(MenuScreen.getInstance());
-	}
-
-	public void render() {
-		getScreen().render(Gdx.graphics.getDeltaTime());
-	}
-	
-	public void dispose() {
-		getScreen().dispose();
-	}
-	
-	/**
-	 * Loads the font.
-	 */
-	private void loadFont() {
-		//load the font
-		FreeTypeFontGenerator generator = new FreeTypeFontGenerator(Gdx.files.internal("fonts/Star Trek Enterprise Future.ttf"));
-		
-		//setting font size
-		FreeTypeFontParameter fontParameter = new FreeTypeFontParameter();
-		fontParameter.size = 100; 
-		
-		//creating the font based on the font parameters
-		font = generator.generateFont(fontParameter);
-		
-		//dispose the generator since its finished being used
-		generator.dispose();
-	}
-	
-	/**
-	 * Loads the UI styles.
-	 */
-	private void initialiseStyles() {
-		//a sprite for a black background
-		Sprite buttonBackground = new Sprite(new Texture(new Pixmap(0, 0, Pixmap.Format.RGB888)));
-		buttonBackground.setColor(Color.WHITE);
-		buttonBackground.setAlpha(0.5f);
-		
-		SpriteDrawable b = new SpriteDrawable(buttonBackground);
-		b.setBottomHeight(-15);
-		b.setTopHeight(-30);
-		buttonStyle = new TextButton.TextButtonStyle();
-		buttonStyle.font = font;
-		buttonStyle.up = b;
-		
-		labelStyle = new Label.LabelStyle();
-		labelStyle.font = font;
-		labelStyle.fontColor = Color.WHITE;
-		
-		scrStyle = new ScrollPane.ScrollPaneStyle();
-		
-		//a sprite for a black background
-		Sprite s = new Sprite(new Texture(new Pixmap(2000, 50, Pixmap.Format.RGB888)));
-		s.setColor(Color.WHITE);
-		s.setAlpha(0.5f);
-		
-		//invisible colour sprite
-		//Sprite invisible = new Sprite(new Texture(new Pixmap(2000, 50, Pixmap.Format.Alpha)));
-		
-		//initialising list style
-		lstStyle = new List.ListStyle();
-		lstStyle.font = font;
-		lstStyle.selection = new SpriteDrawable(s);
-		lstStyle.background = new SpriteDrawable(s);
-		
-		//initialising the text field
-		tfs = new TextFieldStyle();
-		tfs.font = font;
-		tfs.fontColor = Color.WHITE;
-		tfs.background = new SpriteDrawable(s);
-	}
-
-	/**
-	 * @return the singleton instance of this class
-	 */
-	public static Game getInstance() {
-		return instance;
-	}
-
-}
Index: SpaceShooterMaven.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- SpaceShooterMaven.iml	(revision 01d0fbe325e8ed492a3efa370aeafc83ff5036aa)
+++ SpaceShooterMaven.iml	(date 1522522066000)
@@ -1,15 +1,28 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<module type="JAVA_MODULE" version="4">
+<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
   <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_1_5">
     <output url="file://$MODULE_DIR$/target/classes" />
     <output-test url="file://$MODULE_DIR$/target/test-classes" />
     <content url="file://$MODULE_DIR$">
       <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
       <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
       <excludeFolder url="file://$MODULE_DIR$/target" />
     </content>
     <orderEntry type="inheritedJdk" />
     <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="module-library" scope="TEST">
+      <library name="JUnit5.0">
+        <CLASSES>
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/jupiter/junit-jupiter-api/5.0.0/junit-jupiter-api-5.0.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/apiguardian/apiguardian-api/1.0.0/apiguardian-api-1.0.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/opentest4j/opentest4j/1.0.0/opentest4j-1.0.0.jar!/" />
+          <root url="jar://$MAVEN_REPOSITORY$/org/junit/platform/junit-platform-commons/1.0.0/junit-platform-commons-1.0.0.jar!/" />
+        </CLASSES>
+        <JAVADOC />
+        <SOURCES />
+      </library>
+    </orderEntry>
     <orderEntry type="library" name="Maven: com.badlogicgames.gdx:gdx:1.9.8" level="project" />
     <orderEntry type="library" name="Maven: com.badlogicgames.gdx:gdx-platform:natives-desktop:1.9.8" level="project" />
     <orderEntry type="library" name="Maven: com.badlogicgames.gdx:gdx-freetype:1.9.8" level="project" />
@@ -36,5 +49,11 @@
     <orderEntry type="library" name="Maven: com.esotericsoftware.kryo:kryo:2.24.0" level="project" />
     <orderEntry type="library" name="Maven: com.esotericsoftware.minlog:minlog:1.2" level="project" />
     <orderEntry type="library" name="Maven: com.esotericsoftware:jsonbeans:0.7" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.junit.jupiter:junit-jupiter-engine:5.0.0" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.apiguardian:apiguardian-api:1.0.0" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.junit.platform:junit-platform-engine:1.0.0" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.junit.platform:junit-platform-commons:1.0.0" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.opentest4j:opentest4j:1.0.0" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.junit.jupiter:junit-jupiter-api:5.0.0" level="project" />
   </component>
 </module>
\ No newline at end of file
Index: src/main/java/network/client/ClientHandler.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/network/client/ClientHandler.java	(revision 01d0fbe325e8ed492a3efa370aeafc83ff5036aa)
+++ src/main/java/network/client/ClientHandler.java	(date 1522527238000)
@@ -14,9 +14,11 @@
 import network.Network.StartGame;
 import network.Network.JoinRoom;
 import network.Network.UpdateNickname;
+import ui.ControlGame;
 import ui.MPGame;
 import ui.MultiplayerScreen;
-import ui.UI;
+
+import javax.naming.ldap.Control;
 
 public class ClientHandler {
 	
@@ -32,12 +34,12 @@
 			public void received(Connection connection, Object object) {
 				if (object instanceof RoomUpdate) {
 					RoomUpdate msg = (RoomUpdate) object;
-					MultiplayerScreen.populateRooms(msg.roomNames, msg.requiredPlayers);
+					((MultiplayerScreen)ControlGame.getInstance().getScreen()).populateRooms(msg.roomNames, msg.requiredPlayers);
 				}
 				if (object instanceof StartGame) {
 					Gdx.app.postRunnable(new Runnable() {
 						public void run() {
-							UI.getInstance().setScreen(new MPGame(client, nickname));
+							ControlGame.getInstance().setScreen(new MPGame(client, nickname));
 						}
 					});
 				}
Index: .idea/libraries/Maven__org_apiguardian_apiguardian_api_1_0_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_apiguardian_apiguardian_api_1_0_0.xml	(date 1522521812000)
+++ .idea/libraries/Maven__org_apiguardian_apiguardian_api_1_0_0.xml	(date 1522521812000)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.apiguardian:apiguardian-api:1.0.0">
+    <CLASSES>
+      <root url="jar://$PROJECT_DIR$/../../maven/repository/org/apiguardian/apiguardian-api/1.0.0/apiguardian-api-1.0.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$PROJECT_DIR$/../../maven/repository/org/apiguardian/apiguardian-api/1.0.0/apiguardian-api-1.0.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$PROJECT_DIR$/../../maven/repository/org/apiguardian/apiguardian-api/1.0.0/apiguardian-api-1.0.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/dictionaries/Connor.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/dictionaries/Connor.xml	(date 1522527154000)
+++ .idea/dictionaries/Connor.xml	(date 1522527154000)
@@ -0,0 +1,11 @@
+<component name="ProjectDictionaryState">
+  <dictionary name="Connor">
+    <words>
+      <w>cooldown</w>
+      <w>kyronet</w>
+      <w>multiplayer</w>
+      <w>singleplayer</w>
+      <w>unavailible</w>
+    </words>
+  </dictionary>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_junit_jupiter_junit_jupiter_engine_5_0_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_junit_jupiter_junit_jupiter_engine_5_0_0.xml	(date 1522521812000)
+++ .idea/libraries/Maven__org_junit_jupiter_junit_jupiter_engine_5_0_0.xml	(date 1522521812000)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.junit.jupiter:junit-jupiter-engine:5.0.0">
+    <CLASSES>
+      <root url="jar://$PROJECT_DIR$/../../maven/repository/org/junit/jupiter/junit-jupiter-engine/5.0.0/junit-jupiter-engine-5.0.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$PROJECT_DIR$/../../maven/repository/org/junit/jupiter/junit-jupiter-engine/5.0.0/junit-jupiter-engine-5.0.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$PROJECT_DIR$/../../maven/repository/org/junit/jupiter/junit-jupiter-engine/5.0.0/junit-jupiter-engine-5.0.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_junit_jupiter_junit_jupiter_api_5_0_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_junit_jupiter_junit_jupiter_api_5_0_0.xml	(date 1522521812000)
+++ .idea/libraries/Maven__org_junit_jupiter_junit_jupiter_api_5_0_0.xml	(date 1522521812000)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.junit.jupiter:junit-jupiter-api:5.0.0">
+    <CLASSES>
+      <root url="jar://$PROJECT_DIR$/../../maven/repository/org/junit/jupiter/junit-jupiter-api/5.0.0/junit-jupiter-api-5.0.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$PROJECT_DIR$/../../maven/repository/org/junit/jupiter/junit-jupiter-api/5.0.0/junit-jupiter-api-5.0.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$PROJECT_DIR$/../../maven/repository/org/junit/jupiter/junit-jupiter-api/5.0.0/junit-jupiter-api-5.0.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: pom.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- pom.xml	(revision 01d0fbe325e8ed492a3efa370aeafc83ff5036aa)
+++ pom.xml	(date 1522521794000)
@@ -48,6 +48,12 @@
 		    <artifactId>kryonet</artifactId>
 		    <version>2.22.0-RC1</version>
 		</dependency>
+        <dependency>
+            <groupId>org.junit.jupiter</groupId>
+            <artifactId>junit-jupiter-engine</artifactId>
+            <version>5.0.0</version>
+            <scope>test</scope>
+        </dependency>
 	</dependencies>
 	
 	<build>
Index: .idea/libraries/Maven__org_junit_platform_junit_platform_engine_1_0_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_junit_platform_junit_platform_engine_1_0_0.xml	(date 1522521812000)
+++ .idea/libraries/Maven__org_junit_platform_junit_platform_engine_1_0_0.xml	(date 1522521812000)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.junit.platform:junit-platform-engine:1.0.0">
+    <CLASSES>
+      <root url="jar://$PROJECT_DIR$/../../maven/repository/org/junit/platform/junit-platform-engine/1.0.0/junit-platform-engine-1.0.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$PROJECT_DIR$/../../maven/repository/org/junit/platform/junit-platform-engine/1.0.0/junit-platform-engine-1.0.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$PROJECT_DIR$/../../maven/repository/org/junit/platform/junit-platform-engine/1.0.0/junit-platform-engine-1.0.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_junit_platform_junit_platform_commons_1_0_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_junit_platform_junit_platform_commons_1_0_0.xml	(date 1522521812000)
+++ .idea/libraries/Maven__org_junit_platform_junit_platform_commons_1_0_0.xml	(date 1522521812000)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.junit.platform:junit-platform-commons:1.0.0">
+    <CLASSES>
+      <root url="jar://$PROJECT_DIR$/../../maven/repository/org/junit/platform/junit-platform-commons/1.0.0/junit-platform-commons-1.0.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$PROJECT_DIR$/../../maven/repository/org/junit/platform/junit-platform-commons/1.0.0/junit-platform-commons-1.0.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$PROJECT_DIR$/../../maven/repository/org/junit/platform/junit-platform-commons/1.0.0/junit-platform-commons-1.0.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: .idea/libraries/Maven__org_opentest4j_opentest4j_1_0_0.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/libraries/Maven__org_opentest4j_opentest4j_1_0_0.xml	(date 1522521812000)
+++ .idea/libraries/Maven__org_opentest4j_opentest4j_1_0_0.xml	(date 1522521812000)
@@ -0,0 +1,13 @@
+<component name="libraryTable">
+  <library name="Maven: org.opentest4j:opentest4j:1.0.0">
+    <CLASSES>
+      <root url="jar://$PROJECT_DIR$/../../maven/repository/org/opentest4j/opentest4j/1.0.0/opentest4j-1.0.0.jar!/" />
+    </CLASSES>
+    <JAVADOC>
+      <root url="jar://$PROJECT_DIR$/../../maven/repository/org/opentest4j/opentest4j/1.0.0/opentest4j-1.0.0-javadoc.jar!/" />
+    </JAVADOC>
+    <SOURCES>
+      <root url="jar://$PROJECT_DIR$/../../maven/repository/org/opentest4j/opentest4j/1.0.0/opentest4j-1.0.0-sources.jar!/" />
+    </SOURCES>
+  </library>
+</component>
\ No newline at end of file
Index: src/main/java/ui/UIScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ui/UIScreen.java	(date 1522528636000)
+++ src/main/java/ui/UIScreen.java	(date 1522528636000)
@@ -0,0 +1,59 @@
+package ui;
+
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.graphics.GL20;
+import com.badlogic.gdx.scenes.scene2d.Stage;
+import com.badlogic.gdx.utils.viewport.StretchViewport;
+
+/**
+ * This class is used as a base for menu screens.
+ */
+abstract public class UIScreen extends BaseScreen {
+
+    /** The stage to display elements. */
+    Stage stage;
+
+    /** Button cooldown in milliseconds. */
+    private final double BUTTON_COOLDOWN = 0.5;
+
+    /** The time since a button was pressed. */
+    private double timeSinceButtonPressed = BUTTON_COOLDOWN;
+
+    public void show() {
+        super.show();
+
+        //initialising the stage which will stretch
+        stage = new Stage(new StretchViewport(900, 700));
+
+        //allowing the stage to receive input events
+        Gdx.input.setInputProcessor(stage);
+    }
+
+    public void render(float delta) {
+
+        timeSinceButtonPressed = timeSinceButtonPressed + delta;
+
+        Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
+        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
+
+        stage.act(delta); //update actors
+        stage.draw(); //draw actors
+    }
+
+    boolean validateButtonPress() {
+        if (timeSinceButtonPressed > BUTTON_COOLDOWN) {
+            timeSinceButtonPressed = 0;
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    public void resize(int width, int height) {
+        stage.getViewport().update(width, height, true);
+    }
+
+    public void dispose() {
+        stage.dispose();
+    }
+}
\ No newline at end of file
Index: src/main/java/ui/GameScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ui/GameScreen.java	(date 1522529140000)
+++ src/main/java/ui/GameScreen.java	(date 1522529140000)
@@ -0,0 +1,62 @@
+package ui;
+
+import backend.entities.InanimateEntity;
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.graphics.GL20;
+import com.badlogic.gdx.graphics.OrthographicCamera;
+import com.badlogic.gdx.graphics.g2d.BitmapFont;
+import com.badlogic.gdx.graphics.g2d.SpriteBatch;
+import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
+
+abstract public class GameScreen extends BaseScreen {
+
+    /** Font used to display score. */
+    BitmapFont font;
+
+    /** Used to render the entities. */
+    SpriteBatch batch;
+
+    /** Shape renderer used to render health bars. */
+    ShapeRenderer sr;
+
+    /** The camera to render the game. */
+    OrthographicCamera cam;
+
+    /** The background image. */
+    InanimateEntity map;
+
+    public void show() {
+        //instantiate shape renderer
+        sr = new ShapeRenderer();
+
+        //instantiate sprite batch
+        batch = new SpriteBatch();
+
+        //instantiate score font
+        font = new BitmapFont();
+        font.getData().setScale(0.2f);
+        font.setUseIntegerPositions(false);
+
+        //instantiate camera
+        cam = new OrthographicCamera(30, 30);
+        cam.zoom = 2;
+    }
+
+    public void render(float delta) {
+        //clear the last frame that was rendered
+        Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
+        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
+
+        cam.update();
+    }
+
+    public void resize(int width, int height) {
+        cam.update();
+    }
+
+    public void dispose() {
+        batch.dispose();
+        sr.dispose();
+        font.dispose();
+    }
+}
Index: src/main/java/ui/SPGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ui/SPGame.java	(revision 01d0fbe325e8ed492a3efa370aeafc83ff5036aa)
+++ src/main/java/ui/SPGame.java	(date 1522529132000)
@@ -1,16 +1,5 @@
 package ui;
 
-import java.util.concurrent.CopyOnWriteArrayList;
-
-import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Screen;
-import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.OrthographicCamera;
-import com.badlogic.gdx.graphics.g2d.BitmapFont;
-import com.badlogic.gdx.graphics.g2d.SpriteBatch;
-import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
-import com.badlogic.gdx.math.Vector3;
-
 import backend.animations.AnimationHandler;
 import backend.effects.Effect;
 import backend.enemies.Asteroid;
@@ -21,34 +10,28 @@
 import backend.logic.Spawner;
 import backend.projectiles.LockOn;
 import backend.projectiles.Projectile;
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.graphics.GL20;
+import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
+import com.badlogic.gdx.math.Vector3;
+
+import java.util.concurrent.CopyOnWriteArrayList;
 
 /**
- * The screen that contains the main game.
+ * The screen that contains the singleplayer game.
  * @author Connor Stewart
  */
-public class SPGame implements Screen {
-	
+public class SPGame extends GameScreen {
+
+	/** The height of the game. */
 	public static final int GAME_HEIGHT = 100;
 
+	/** The width of the game. */
 	public static final int GAME_WIDTH = 100;
 
+	/** The current instance of a singleplayer game. */
 	private static SPGame INSTANCE;
 
-	/** Font used to display score. */
-	private BitmapFont font;
-
-	/** Used to render the entities. */
-	private SpriteBatch batch;
-	
-	/** Shape renderer used to render health bars. */
-	private ShapeRenderer sr;
-	
-	/** The camera to render the game. */
-	private OrthographicCamera cam;
-	
-	/** The background image. */
-	private InanimateEntity map;
-
 	private CopyOnWriteArrayList<Entity> activeEntities;
 
 	private Spawner spawner;
@@ -60,38 +43,28 @@
 	private int score;
 
 	private CopyOnWriteArrayList<AnimationHandler> activeAnimations;
-	
+
 	public SPGame() {
 		SPGame.INSTANCE = this;
 	}
 
 	public void show() {
+		super.show();
+
 		player = new Player(SPGame.GAME_WIDTH / 2, SPGame.GAME_HEIGHT / 2);
 		
 		//instantiate map
 		map = new InanimateEntity("backgrounds/redPlanet.png", SPGame.GAME_WIDTH, SPGame.GAME_HEIGHT);
-		
-		//instantiate shape renderer
-		sr = new ShapeRenderer();
-		
-		//instantiate sprite batch
-		batch = new SpriteBatch();
-		
-		//instantiate font for the score
-		font = new BitmapFont();
-		font.getData().setScale(0.2f);
-		font.setUseIntegerPositions(false);
-		
-		//instantiate camera
-		cam = new OrthographicCamera(30, 30);
+
+		//instantiate camera position
 		cam.position.set(player.getX(), player.getY(), 0);
-		cam.zoom = 2;
 		
 		//instantiate logic entities
 		spawner = new Spawner(this);
 		activeEntities = new CopyOnWriteArrayList<Entity>();
 		activeEffects = new CopyOnWriteArrayList<Effect>();
 		activeAnimations = new CopyOnWriteArrayList<AnimationHandler>();
+
 		//reset score
 		score = 0;
 		
@@ -100,16 +73,11 @@
 	}
 
 	public void render(float delta) {
+		super.render(delta);
 		checkInput(delta);
 		
-		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
-		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
-		
 		update(delta);
 		
-		//update camera
-		cam.update();
-		
 		//the mouse position relative to the camera
 		Vector3 mousePos = new Vector3(Gdx.input.getX(),Gdx.input.getY(),0);
 		cam.unproject(mousePos);
@@ -128,7 +96,7 @@
 		if (player.getCenterX() - cam.viewportWidth > 0 && player.getCenterX() + cam.viewportWidth < map.getWidth())
 			cam.position.x = player.getCenterX();
 
-		//get the font coordinates according to the current camera position
+		//get the starTrekFont coordinates according to the current camera position
 		Vector3 fontCord = new Vector3(10, 10, 0);
 		cam.unproject(fontCord);
 		
@@ -141,9 +109,7 @@
 		//draw the players score
 		font.draw(batch, Integer.toString(score), fontCord.x, fontCord.y);
 
-		//draw 
-
-		
+		//draw
 		for (AnimationHandler animation : activeAnimations)
 			animation.draw(batch);
 			
@@ -210,21 +176,6 @@
 
 	}
 
-	public void resize(int width, int height) {
-		cam.update();
-	}
-
-	public void pause() {}
-
-	public void resume() {}
-
-	public void hide() {}
-
-	public void dispose() {
-		batch.dispose();
-		sr.dispose();
-	}
-
 	public static SPGame getInstance() {
 		return INSTANCE;
 	}
Index: src/main/java/ui/MultiplayerScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ui/MultiplayerScreen.java	(revision 01d0fbe325e8ed492a3efa370aeafc83ff5036aa)
+++ src/main/java/ui/MultiplayerScreen.java	(date 1522528836000)
@@ -1,42 +1,21 @@
 package ui;
 
-import javax.swing.JOptionPane;
-
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input;
-import com.badlogic.gdx.Screen;
-import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Texture;
 import com.badlogic.gdx.scenes.scene2d.Actor;
-import com.badlogic.gdx.scenes.scene2d.Stage;
 import com.badlogic.gdx.scenes.scene2d.Touchable;
-import com.badlogic.gdx.scenes.scene2d.ui.HorizontalGroup;
-import com.badlogic.gdx.scenes.scene2d.ui.Image;
-import com.badlogic.gdx.scenes.scene2d.ui.List;
-import com.badlogic.gdx.scenes.scene2d.ui.ScrollPane;
-import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
+import com.badlogic.gdx.scenes.scene2d.ui.*;
 import com.badlogic.gdx.scenes.scene2d.utils.ChangeListener;
-import com.badlogic.gdx.utils.viewport.StretchViewport;
-
 import network.client.ClientHandler;
 
+import javax.swing.*;
+
 /**
  * This screen allows the player to connect to other players and the server for multiplayer.
  * @author Connor Stewart
  */
-public class MultiplayerScreen implements Screen {
-	
-	/** Singleton instance of this class. */
-	private static final MultiplayerScreen instance = new MultiplayerScreen();
-	
-	/** Button cooldown in milliseconds. */
-	private final double BUTTON_COOLDOWN = 0.5;
-	
-	/** The time since a button was pressed. */
-	private double timeSinceButtonPressed = BUTTON_COOLDOWN;
-	
-	/** The stage to display elements. */
-	private Stage stage;
+public class MultiplayerScreen extends UIScreen {
 
 	/** The button that allows the client to create a room. */
 	private TextButton btnRoom;
@@ -50,35 +29,25 @@
 	/** List to display required players for a room. */
 	private List<String> playersList;
 	
-	/** The group that holds the lists. */
-	private HorizontalGroup lists;
-	
-	/** Scroll panel for viewing rooms. */
-	private ScrollPane pnlScroll;
-	
 	/** The client that controls the connection to the server. */
 	private ClientHandler client;
-	
-	/** {@link #getInstance()} should be used to obtain an instance of this class.  */
-	private MultiplayerScreen() {}
 
 	public void show() {
-		//initialising the stage which will stretch
-		stage = new Stage(new StretchViewport(900, 700));
-		
-		btnRoom = new TextButton("Create Room", UI.buttonStyle);
-		btnRefresh = new TextButton("Refresh", UI.buttonStyle);
+	    super.show();
+
+		btnRoom = new TextButton("Create Room", buttonStyle);
+		btnRefresh = new TextButton("Refresh", buttonStyle);
 		
 		//make background
 		Image background = new Image(new Texture(Gdx.files.internal("backgrounds/hubble.jpg")));
 		background.setFillParent(true);
 		background.setPosition(0, 0);
-		
-		lists = new HorizontalGroup();
+
+		HorizontalGroup lists = new HorizontalGroup();
 		
 		//initialising room and player lists
-		roomList = new List<String>(UI.lstStyle);
-		playersList = new List<String>(UI.lstStyle);
+		roomList = new List<String>(lstStyle);
+		playersList = new List<String>(lstStyle);
 		
 		lists.addActor(roomList);
 		lists.addActor(playersList);
@@ -87,10 +56,10 @@
 		roomList.addListener(new ChangeListener() {
 			@Override
 			public void changed(ChangeEvent event, Actor actor) {
-				int index = roomList.getSelectedIndex();
+		    int index = roomList.getSelectedIndex();
 				
-				if (playersList.getItems().size > index)
-					playersList.setSelectedIndex(index);
+			if (playersList.getItems().size > index)
+				playersList.setSelectedIndex(index);
 			}
 		});
 		
@@ -98,14 +67,12 @@
 		playersList.setTouchable(Touchable.disabled);
 		
 		//initialising the scroll pane
-		pnlScroll = new ScrollPane(lists, UI.scrStyle);
+		ScrollPane pnlScroll = new ScrollPane(lists, scrStyle);
 		pnlScroll.setBounds(20, 100, 850, 500);
 		pnlScroll.debug();
 		
 		btnRefresh.setPosition(btnRoom.getX() + 500, btnRefresh.getY());
 		
-		Gdx.input.setInputProcessor(stage);
-		
 		stage.addActor(background);
 		stage.addActor(pnlScroll);
 		stage.addActor(btnRoom);
@@ -117,64 +84,32 @@
 	}
 
 	public void render(float delta) {
-		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
-		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
-		
-		stage.act(delta); //update actors
-		stage.draw(); //draw actors
-		
-		timeSinceButtonPressed = timeSinceButtonPressed + delta;
-		
-		if (btnRoom.isPressed() && timeSinceButtonPressed > BUTTON_COOLDOWN) {
-			timeSinceButtonPressed = 0;
-			
+	    super.render(delta);
+
+		if (btnRoom.isPressed() && validateButtonPress()) {
 			String roomName = JOptionPane.showInputDialog(null, "Input your room's name.", "Room Name", JOptionPane.QUESTION_MESSAGE);
 			String roomNum = JOptionPane.showInputDialog(null, "Input the number of players.", "Room Number", JOptionPane.QUESTION_MESSAGE);
 			
 			client.addRoom(roomName, roomNum);
 		}
 		
-		if (btnRefresh.isPressed() && timeSinceButtonPressed > BUTTON_COOLDOWN) {
-			timeSinceButtonPressed = 0;
+		if (btnRefresh.isPressed() && validateButtonPress())
 			client.refreshRooms();
-		}
-		
-		//join the game
-		if (Gdx.input.isKeyPressed(Input.Keys.ENTER) && timeSinceButtonPressed > BUTTON_COOLDOWN) {
-			timeSinceButtonPressed = 0;
+
+		if (Gdx.input.isKeyPressed(Input.Keys.ENTER) && validateButtonPress())
 			client.joinRoom(roomList.getSelected());
-		}
 	}
-
-	public void resize(int width, int height) {
-		stage.getViewport().update(width, height, true);
-	}
-
-	public void pause() {}
-
-	public void resume() {}
-
-	public void hide() {}
-
-	public void dispose() {}
-	
-	/**
-	 * @return singleton instance of this class
-	 */
-	public static Screen getInstance() {
-		return instance;
-	}
 
 	/**
 	 * Populates the rooms with a new set of rooms.
 	 * @param roomNames the room names to add
 	 */
-	public static void populateRooms(String[] roomNames, String[] requiredPlayers) {
-		MultiplayerScreen.instance.roomList.clearItems();
-		MultiplayerScreen.instance.playersList.clearItems();
+	public void populateRooms(String[] roomNames, String[] requiredPlayers) {
+		roomList.clearItems();
+		playersList.clearItems();
 		
-		MultiplayerScreen.instance.roomList.setItems(roomNames);
-		MultiplayerScreen.instance.playersList.setItems(requiredPlayers);
+		roomList.setItems(roomNames);
+		playersList.setItems(requiredPlayers);
 	}
 	
 }
Index: src/main/java/backend/entities/Player.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/backend/entities/Player.java	(revision 01d0fbe325e8ed492a3efa370aeafc83ff5036aa)
+++ src/main/java/backend/entities/Player.java	(date 1522527246000)
@@ -9,9 +9,9 @@
 import backend.weapons.PlayerHeavyWeapon;
 import backend.weapons.PlayerLightWeapon;
 import backend.weapons.Weapon;
+import ui.ControlGame;
 import ui.SPGame;
 import ui.ScoreScreen;
-import ui.UI;
 
 /**
  * Class used to represent that player character.
@@ -104,7 +104,7 @@
 
 	@Override
 	public void onDestroy() {
-		UI.getInstance().setScreen(new ScoreScreen(SPGame.getInstance().getScore()));
+		ControlGame.getInstance().setScreen(new ScoreScreen(SPGame.getInstance().getScore()));
 	}
 
 	@Override
Index: src/main/java/ui/MenuScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ui/MenuScreen.java	(revision 01d0fbe325e8ed492a3efa370aeafc83ff5036aa)
+++ src/main/java/ui/MenuScreen.java	(date 1522528592000)
@@ -1,56 +1,39 @@
 package ui;
 
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Screen;
-import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.scenes.scene2d.Stage;
 import com.badlogic.gdx.scenes.scene2d.ui.Image;
 import com.badlogic.gdx.scenes.scene2d.ui.Label;
 import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
-import com.badlogic.gdx.utils.viewport.StretchViewport;
 
 /**
  * This class is used to define the main menu layout.
  * @author Connor Stewart
  */
-public class MenuScreen implements Screen {
-	
-	/** The singleton instance of this class. */
-	private final static MenuScreen instance = new MenuScreen();
-	
-	/** The stage to display elements. */
-	private Stage stage;
+public class MenuScreen extends UIScreen {
 		
 	/** Buttons. */
 	private TextButton btnPlay, btnQuit, btnMultiplayer;
-	
-	/** {@link #getInstance()} should be used to obtain an instance of this class.  */
-	private MenuScreen(){};
 
 	public void show() {
+		super.show();
+
 		//make background
 		Image background = new Image(new Texture(Gdx.files.internal("backgrounds/hubble.jpg")));
 		background.setFillParent(true);
 		background.setPosition(0, 0);
 		
 		//initialising the buttons
-		btnPlay = new TextButton("Play", UI.buttonStyle);
+		btnPlay = new TextButton("Play", buttonStyle);
 		btnPlay.setPosition(Gdx.graphics.getWidth() / 2 - btnPlay.getWidth() / 2, Gdx.graphics.getHeight() / 2 - 20);
-		btnQuit = new TextButton("Quit", UI.buttonStyle);
+		btnQuit = new TextButton("Quit", buttonStyle);
 		btnQuit.setPosition((btnPlay.getX() + btnQuit.getWidth() / 8) - 10, btnPlay.getY() - btnPlay.getHeight() - 20);
-		btnMultiplayer = new TextButton("Multiplayer", UI.buttonStyle);
-		
-		//initialising the stage which will stretch
-		stage = new Stage(new StretchViewport(900, 700));
-		
+		btnMultiplayer = new TextButton("Multiplayer", buttonStyle);
+
 		//initialising the lose label
-		Label lblTitle = new Label("Space Defence", UI.labelStyle);
+		Label lblTitle = new Label("Space Defence", labelStyle);
 		lblTitle.setPosition((Gdx.graphics.getWidth() / 2) - lblTitle.getWidth() / 2, Gdx.graphics.getHeight() - 100);
-		
-		//allowing the stage to receive input events
-		Gdx.input.setInputProcessor(stage);
-		
+
 		//adding actors to the stage
 		stage.addActor(background);
 		stage.addActor(lblTitle);
@@ -60,44 +43,18 @@
 	}
 
 	public void render(float delta) {
-		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
-		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
-		
-		stage.act(delta); //update actors
-		stage.draw(); //draw actors
-		
+		super.render(delta);
+
 		//goto the game screen if the play button is pressed
-		if (btnPlay.isPressed())
-			UI.getInstance().setScreen(new SPGame());
+		if (btnPlay.isPressed() && validateButtonPress())
+			ControlGame.getInstance().setScreen(new SPGame());
 		
 		//goto the multiplayer screen if the multiplayer button is pressed
-		if (btnMultiplayer.isPressed()) 
-			UI.getInstance().setScreen(MultiplayerScreen.getInstance());
+		if (btnMultiplayer.isPressed() && validateButtonPress())
+			ControlGame.getInstance().setScreen(new MultiplayerScreen());
 			
 		//quit when the quit button is pressed
-		if (btnQuit.isPressed())
+		if (btnQuit.isPressed() && validateButtonPress())
 			Gdx.app.exit();
 	}
-
-	public void resize(int width, int height) {
-		stage.getViewport().update(width, height, true);
-	}
-
-	public void pause() {}
-
-	public void resume() {}
-
-	public void hide() {}
-
-	public void dispose() {
-		stage.dispose();
-	}
-
-	/**
-	 * @return singleton instance of this class
-	 */
-	public static Screen getInstance() {
-		return instance;
-	}
-
 }
Index: src/main/java/backend/entities/Entity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/backend/entities/Entity.java	(revision 01d0fbe325e8ed492a3efa370aeafc83ff5036aa)
+++ src/main/java/backend/entities/Entity.java	(date 1522522794000)
@@ -34,7 +34,7 @@
 	 * If this maxHealth parameter is set to zero this entity will have no health system.
 	 * @param imageLocation the path to the image file for this entity
 	 * @param maxHealth the maximum health of this entity
-	 * @param the speed of this entity (pixels per second)
+	 * @param speed the speed of this entity (pixels per second)
 	 */
 	public Entity(String imageLocation, double maxHealth, double speed) { 
 		super(imageLocation);
Index: src/main/java/ui/ScoreScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ui/ScoreScreen.java	(revision 01d0fbe325e8ed492a3efa370aeafc83ff5036aa)
+++ src/main/java/ui/ScoreScreen.java	(date 1522528846000)
@@ -1,83 +1,71 @@
 package ui;
 
-import java.util.ArrayList;
-
 import com.badlogic.gdx.Gdx;
-import com.badlogic.gdx.Screen;
-import com.badlogic.gdx.graphics.GL20;
 import com.badlogic.gdx.graphics.Texture;
-import com.badlogic.gdx.graphics.g2d.BitmapFont;
 import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
 import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator.FreeTypeFontParameter;
 import com.badlogic.gdx.scenes.scene2d.Stage;
-import com.badlogic.gdx.scenes.scene2d.ui.Dialog;
-import com.badlogic.gdx.scenes.scene2d.ui.Image;
-import com.badlogic.gdx.scenes.scene2d.ui.Label;
-import com.badlogic.gdx.scenes.scene2d.ui.List;
-import com.badlogic.gdx.scenes.scene2d.ui.ScrollPane;
-import com.badlogic.gdx.scenes.scene2d.ui.TextButton;
-import com.badlogic.gdx.scenes.scene2d.ui.TextField;
-import com.badlogic.gdx.scenes.scene2d.ui.Window;
+import com.badlogic.gdx.scenes.scene2d.ui.*;
 import com.badlogic.gdx.utils.Align;
 import com.badlogic.gdx.utils.Timer;
 import com.badlogic.gdx.utils.Timer.Task;
 import com.badlogic.gdx.utils.viewport.StretchViewport;
-
 import database.ScoreDAO;
 
+import java.util.ArrayList;
+
 /**
  * This class is used to show the user their score and allow them to upload theirs.
  * @author Connor Stewart
  */
-public class ScoreScreen implements Screen {
-	
-	/** The stage to display elements. */
-	private Stage stage;
-	
-	/** Used to display the score to the user. */
-	private Label lblScore;
-	
+public class ScoreScreen extends UIScreen {
+
 	/** Buttons. */
 	private TextButton btnUpload, btnBack;
 	
 	/** Used to enter your name for the score board. */
 	private TextField txtName;
-	
+
+	/** The scores retrieved from the server. */
 	private List<String> lstScores;
-	
+
+	/** The scroll panel to show the list of scores. */
 	private ScrollPane pnlScroll;
-	
+
+	/** Whether the score has been uploaded. */
 	private boolean uploaded;
-	
+
+	/** The players score. */
 	private int score;
 	
 	public ScoreScreen(int score){
 		this.score = score;
-	};
-
-	public void show() {
 		uploaded = false;
-		
+	}
+
+	public void show() {
+		super.show();
+
 		//make background
 		Image background = new Image(new Texture(Gdx.files.internal("backgrounds/hubble.jpg")));
 		background.setFillParent(true);
 		background.setPosition(0, 0);
 		
 		//initialising score list
-		lstScores = new List<String>(UI.lstStyle);
+		lstScores = new List<String>(lstStyle);
 
 		//initialising the scroll pane
-		pnlScroll = new ScrollPane(lstScores, UI.scrStyle);
+		pnlScroll = new ScrollPane(lstScores, scrStyle);
 		pnlScroll.setBounds(20, 100, 350, 400);
 		
 		//initialising the buttons
-		btnUpload = new TextButton("Upload", UI.buttonStyle);
+		btnUpload = new TextButton("Upload", buttonStyle);
 		btnUpload.setPosition(Gdx.graphics.getWidth() / 2 - btnUpload.getWidth() / 2 + 100, Gdx.graphics.getHeight() / 2 - 100);
 		
-		btnBack = new TextButton("Back", UI.buttonStyle);
+		btnBack = new TextButton("Back", buttonStyle);
 		btnBack.setPosition(btnUpload.getX() + 270, btnUpload.getY());
 		
-		txtName = new TextField("", UI.tfs);
+		txtName = new TextField("", tfs);
 		txtName.setBounds(btnUpload.getX(), btnUpload.getY() + 150, 420, 100);
 		txtName.setMaxLength(3);
 		txtName.setAlignment(Align.center);
@@ -86,12 +74,9 @@
 		stage = new Stage(new StretchViewport(900, 700));
 		
 		//initialising the score label
-		lblScore = new Label("Score:" + score, UI.labelStyle);
+		Label lblScore = new Label("Score:" + score, labelStyle);
 		lblScore.setPosition((Gdx.graphics.getWidth() / 2) - lblScore.getWidth() / 2, Gdx.graphics.getHeight() - 110);
 		
-		//allowing the stage to receive input events
-		Gdx.input.setInputProcessor(stage);
-		
 		//adding actors to the stage
 		stage.addActor(background);
 		stage.addActor(lblScore);
@@ -134,26 +119,15 @@
 	}
 
 	public void render(float delta) {
-		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
-		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
-		
-		stage.act(delta); //update actors
-		stage.draw(); //draw actors
-		
+		super.render(delta);
+
 		//goto the game screen if the play button is pressed
-		if (btnUpload.isPressed() && uploaded == false) {
+		if (btnUpload.isPressed() && validateButtonPress() && !uploaded) {
 			if (txtName.getText().length() != 3) {
 				Window.WindowStyle wStyle = new Window.WindowStyle();
-				//font generator
-				FreeTypeFontGenerator generator = new FreeTypeFontGenerator(Gdx.files.internal("Star Trek Enterprise Future.ttf"));
-				FreeTypeFontParameter parameter = new FreeTypeFontParameter();
-				parameter.size = 50; //setting font size
-				
-				//creating font object
-				BitmapFont windowFont = generator.generateFont(parameter);
+
+				wStyle.titleFont = starTrekFont;
 				
-				wStyle.titleFont = windowFont;
-				
 				final Dialog dialog = new Dialog("You must input a three letter name!", wStyle) {
 				    public void result(Object obj) {
 				        System.out.println("result "+obj);
@@ -178,27 +152,11 @@
 				txtName.setText("");
 				uploaded = true;
 			}
-			
 		}
 		
-		if (btnBack.isPressed()) {
-			UI.getInstance().setScreen(MenuScreen.getInstance());
-		}
-
-	}
-
-	public void resize(int width, int height) {
-		stage.getViewport().update(width, height, true);
-	}
-
-	public void pause() {}
+		if (btnBack.isPressed() && validateButtonPress())
+			ControlGame.getInstance().setScreen(new MenuScreen());
 
-	public void resume() {}
-
-	public void hide() {}
-
-	public void dispose() {
-		stage.dispose();
 	}
 
-}
+}
\ No newline at end of file
Index: src/main/java/ui/ControlGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ui/ControlGame.java	(date 1522528026000)
+++ src/main/java/ui/ControlGame.java	(date 1522528026000)
@@ -0,0 +1,46 @@
+package ui;
+
+import com.badlogic.gdx.Game;
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.Screen;
+
+/**
+ * This class is used to control which screen is being displayed and dispose of old screens.
+ */
+public class ControlGame extends Game {
+
+    /** The singleton instance of this class. */
+    private static ControlGame instance = new ControlGame();
+
+    /** The screen that is currently being shown. */
+    private static Screen currentScreen;
+
+    public void create() {
+        setScreen(new MenuScreen());
+    }
+
+    public void render() {
+        getScreen().render(Gdx.graphics.getDeltaTime());
+    }
+
+    public void dispose() {
+        getScreen().dispose();
+    }
+
+    @Override
+    public void setScreen(Screen screen) {
+        if (currentScreen != null)
+            currentScreen.dispose();
+
+        super.setScreen(screen);
+        currentScreen = screen;
+    }
+
+    /**
+     * @return the singleton instance of this class
+     */
+    public static ControlGame getInstance() {
+        return instance;
+    }
+
+}
Index: src/main/java/ui/Driver.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ui/Driver.java	(revision 01d0fbe325e8ed492a3efa370aeafc83ff5036aa)
+++ src/main/java/ui/Driver.java	(date 1522527990000)
@@ -5,29 +5,19 @@
 import network.server.ServerHandler;
 
 public class Driver {
-	
-	public static String clientIP;
-	
+
 	public static void main(String[] args) {
+		//Kyronet logger
 		//Log.set(Log.LEVEL_DEBUG);
-		
+
 		if (args.length > 0 && args[0].equals("server")) {
 			ServerHandler.getInstance();
-		} else if (args.length > 0 && args[0].equals("client")) {
-			clientIP = args[1];
-			LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
-			config.title = "Space Defence";
-			config.width = 900;
-			config.height = 700;
-			//config.fullscreen = true;
-			new LwjglApplication(UI.getInstance(), config);
 		} else { //start the game
 			LwjglApplicationConfiguration config = new LwjglApplicationConfiguration();
 			config.title = "Space Defence";
 			config.width = 900;
 			config.height = 700;
-			//config.fullscreen = true;
-			new LwjglApplication(UI.getInstance(), config);
+			new LwjglApplication(ControlGame.getInstance(), config);
 		}
 
 	}
Index: src/main/java/ui/MPGame.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ui/MPGame.java	(revision 01d0fbe325e8ed492a3efa370aeafc83ff5036aa)
+++ src/main/java/ui/MPGame.java	(date 1522529080000)
@@ -1,53 +1,32 @@
 package ui;
 
-import java.io.IOException;
-import java.util.concurrent.CopyOnWriteArrayList;
-
-import javax.swing.JOptionPane;
-
+import backend.entities.InanimateEntity;
+import backend.entities.MultiplayerPlayer;
+import backend.projectiles.Projectile;
 import com.badlogic.gdx.Gdx;
 import com.badlogic.gdx.Input;
-import com.badlogic.gdx.Screen;
 import com.badlogic.gdx.graphics.GL20;
-import com.badlogic.gdx.graphics.OrthographicCamera;
-import com.badlogic.gdx.graphics.g2d.BitmapFont;
-import com.badlogic.gdx.graphics.g2d.SpriteBatch;
 import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
 import com.badlogic.gdx.math.Vector3;
 import com.esotericsoftware.kryonet.Client;
 import com.esotericsoftware.kryonet.Connection;
 import com.esotericsoftware.kryonet.Listener;
 import com.esotericsoftware.kryonet.Listener.ThreadedListener;
-
-import backend.entities.InanimateEntity;
-import backend.entities.MultiplayerPlayer;
-import backend.projectiles.Projectile;
 import network.Network;
 import network.Network.*;
 
-public class MPGame implements Screen {
+import javax.swing.*;
+import java.io.IOException;
+import java.util.concurrent.CopyOnWriteArrayList;
+
+public class MPGame extends GameScreen {
 	
 	/** Players that are currently active in the game. */
 	private CopyOnWriteArrayList<Projectile> projectiles  = new CopyOnWriteArrayList<Projectile>();
 
 	/** Players that are currently active in the game. */
 	private CopyOnWriteArrayList<MultiplayerPlayer> players  = new CopyOnWriteArrayList<MultiplayerPlayer>();	
-	
-	/** Font used to display score. */
-	private BitmapFont font;
 
-	/** Used to render the sprites/entities. */
-	private SpriteBatch batch;
-	
-	/** Shape renderer used to render health bars. */
-	private ShapeRenderer sr;
-	
-	/** The camera to render the game. */
-	private OrthographicCamera cam;
-	
-	/** The background image. */
-	private InanimateEntity map;
-	
 	/** This clients player. */
 	private MultiplayerPlayer player;
 	
@@ -56,7 +35,8 @@
 	
 	/** The client connected to the server. */
 	private Client client;
-	
+
+	/** This clients nickname. */
 	private String clientNickname;
 	
 	public MPGame(Client client, String nickname) {
@@ -76,18 +56,20 @@
 							
 							if (toAdd.getPlayerName().equals(clientNickname))
 								player = toAdd;
-						};
+						}
 					});
 				}
 				if (object instanceof AddProjectile) {
 					final AddProjectile msg = (AddProjectile) object;
 					Gdx.app.postRunnable(new Runnable(){
 						public void run() {
-							Projectile toAdd = null;
+							Projectile toAdd;
 							MultiplayerPlayer player = getPlayerByID(msg.playerID);
 							if (msg.type.equals("Light")) {
+								assert player != null;
 								toAdd = player.getLeftWeapon().fireWithoutValidation(player.getCenterX(), player.getCenterY(), player.getRotation());
 							} else {
+								assert player != null;
 								toAdd = player.getRightWeapon().fireWithoutValidation(player.getCenterX(), player.getCenterY(), player.getRotation());
 							}
 							 
@@ -130,35 +112,19 @@
 	}
 
 	public void show() {
+		super.show();
 		System.out.println(getClass().getSimpleName() + " >>> Multiplayer game started!");
 		
 		//instantiate map
 		map = new InanimateEntity("backgrounds/redPlanet.png", Network.GAME_WIDTH, Network.GAME_HEIGHT);
 		player = new MultiplayerPlayer(Network.GAME_WIDTH / 2, Network.GAME_HEIGHT / 2, "default");
-
-		//instantiate font for the score
-		font = new BitmapFont();
-		font.getData().setScale(0.2f);
-		font.setUseIntegerPositions(false);
-		
-		//instantiate shape renderer
-		sr = new ShapeRenderer();
-		
-		//instantiate sprite batch
-		batch = new SpriteBatch();
-		
-		//instantiate camera
-		cam = new OrthographicCamera(30, 30);
-		cam.zoom = 2;
 	}
 
 	public void render(float delta) {
+		super.render(delta);
+
 		checkInput();
 		
-		//clear the last frame that was rendered
-		Gdx.gl.glClearColor(0.2f, 0.2f, 0.2f, 1);
-		Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);
-		
 		//get the player name coordinates according to the current camera position
 		Vector3 nameCord = new Vector3(player.getCenterX(), player.getCenterY(), 0);
 		cam.unproject(nameCord);
@@ -167,9 +133,6 @@
 		Vector3 scoreCord = new Vector3(10, 10, 0);
 		cam.unproject(scoreCord);
 		
-		//update camera
-		cam.update();
-		
 		//the mouse position relative to the camera
 		Vector3 mousePos = new Vector3(Gdx.input.getX(),Gdx.input.getY(),0);
 		cam.unproject(mousePos);
@@ -205,21 +168,21 @@
 		//draw background
 		map.draw(batch);
 		
-		int yincrease = 5;
+		int yIncrease = 5;
 		font.setUseIntegerPositions(false);
 		
 		for (int i = 0; i < players.size(); i++) {
 			//draw the players name
 			font.draw(batch, players.get(i).getPlayerName(), players.get(i).getCenterX(), players.get(i).getCenterY());
 			//draw the players scores
-			font.draw(batch, players.get(i).getPlayerName() + ": " + players.get(i).getKills(), scoreCord.x, scoreCord.y - (i * yincrease));
+			font.draw(batch, players.get(i).getPlayerName() + ": " + players.get(i).getKills(), scoreCord.x, scoreCord.y - (i * yIncrease));
 		}
 
 		//draw players
 		for (MultiplayerPlayer player : players) {
 			player.draw(batch);
 			if (player.getKills() >= 10) {
-				UI.getInstance().setScreen(MenuScreen.getInstance());
+				ControlGame.getInstance().setScreen(new MenuScreen());
 				JOptionPane.showMessageDialog(null, player.getPlayerName() + " has won!", "Winner", JOptionPane.INFORMATION_MESSAGE);
 				client.close();
 				try {
Index: src/main/java/ui/BaseScreen.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- src/main/java/ui/BaseScreen.java	(date 1522528562000)
+++ src/main/java/ui/BaseScreen.java	(date 1522528562000)
@@ -0,0 +1,106 @@
+package ui;
+
+import com.badlogic.gdx.Application;
+import com.badlogic.gdx.Gdx;
+import com.badlogic.gdx.Screen;
+import com.badlogic.gdx.graphics.Color;
+import com.badlogic.gdx.graphics.Pixmap;
+import com.badlogic.gdx.graphics.Texture;
+import com.badlogic.gdx.graphics.g2d.BitmapFont;
+import com.badlogic.gdx.graphics.g2d.Sprite;
+import com.badlogic.gdx.graphics.g2d.freetype.FreeTypeFontGenerator;
+import com.badlogic.gdx.scenes.scene2d.ui.*;
+import com.badlogic.gdx.scenes.scene2d.utils.SpriteDrawable;
+
+/**
+ * This class is the superclass for all screens. <br>
+ * This class was created to reduce the bloat of the pause, resume and hide Screen methods because they are not used.
+ */
+public abstract class BaseScreen implements Screen {
+
+    /** The style for buttons within the game. */
+    TextButton.TextButtonStyle buttonStyle;
+
+    /** The style for labels within the game. */
+    Label.LabelStyle labelStyle;
+
+    /** The style for lists within the game. */
+    List.ListStyle lstStyle;
+
+    /** The style for text fields within the game. */
+    TextField.TextFieldStyle tfs;
+
+    /** The style for scroll panes within the game. */
+    ScrollPane.ScrollPaneStyle scrStyle;
+
+    /** The starTrekFont for use within the game. */
+    BitmapFont starTrekFont;
+
+    public void show() {
+        loadFont();
+        initialiseStyles();
+    }
+
+    /**
+     * Loads the starTrekFont.
+     */
+    private void loadFont() {
+        //load the starTrekFont
+        FreeTypeFontGenerator generator = new FreeTypeFontGenerator(Gdx.files.internal("fonts/Star Trek Enterprise Future.ttf"));
+
+        //setting starTrekFont size
+        FreeTypeFontGenerator.FreeTypeFontParameter fontParameter = new FreeTypeFontGenerator.FreeTypeFontParameter();
+        fontParameter.size = 100;
+
+        //creating the starTrekFont based on the starTrekFont parameters
+        starTrekFont = generator.generateFont(fontParameter);
+
+        //dispose the generator since its finished being used
+        generator.dispose();
+    }
+
+    /**
+     * Loads the MyGame styles.
+     */
+    private void initialiseStyles() {
+        //a sprite for a black background
+        Sprite buttonBackground = new Sprite(new Texture(new Pixmap(0, 0, Pixmap.Format.RGB888)));
+        buttonBackground.setColor(Color.WHITE);
+        buttonBackground.setAlpha(0.5f);
+
+        SpriteDrawable b = new SpriteDrawable(buttonBackground);
+        b.setBottomHeight(-15);
+        b.setTopHeight(-30);
+        buttonStyle = new TextButton.TextButtonStyle();
+        buttonStyle.font = starTrekFont;
+        buttonStyle.up = b;
+
+        labelStyle = new Label.LabelStyle();
+        labelStyle.font = starTrekFont;
+        labelStyle.fontColor = Color.WHITE;
+
+        scrStyle = new ScrollPane.ScrollPaneStyle();
+
+        //a sprite for a black background
+        Sprite s = new Sprite(new Texture(new Pixmap(2000, 50, Pixmap.Format.RGB888)));
+        s.setColor(Color.WHITE);
+        s.setAlpha(0.5f);
+
+        //initialising list style
+        lstStyle = new List.ListStyle();
+        lstStyle.font = starTrekFont;
+        lstStyle.selection = new SpriteDrawable(s);
+        lstStyle.background = new SpriteDrawable(s);
+
+        //initialising the text field
+        tfs = new TextField.TextFieldStyle();
+        tfs.font = starTrekFont;
+        tfs.fontColor = Color.WHITE;
+        tfs.background = new SpriteDrawable(s);
+    }
+
+    public void pause() {}
+    public void resume() {}
+    public void hide() {}
+
+}
\ No newline at end of file
Index: .idea/uiDesigner.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/uiDesigner.xml	(date 1522523686000)
+++ .idea/uiDesigner.xml	(date 1522523686000)
@@ -0,0 +1,124 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="Palette2">
+    <group name="Swing">
+      <item class="com.intellij.uiDesigner.HSpacer" tooltip-text="Horizontal Spacer" icon="/com/intellij/uiDesigner/icons/hspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="1" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="com.intellij.uiDesigner.VSpacer" tooltip-text="Vertical Spacer" icon="/com/intellij/uiDesigner/icons/vspacer.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="1" anchor="0" fill="2" />
+      </item>
+      <item class="javax.swing.JPanel" icon="/com/intellij/uiDesigner/icons/panel.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JScrollPane" icon="/com/intellij/uiDesigner/icons/scrollPane.png" removable="false" auto-create-binding="false" can-attach-label="true">
+        <default-constraints vsize-policy="7" hsize-policy="7" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JButton" icon="/com/intellij/uiDesigner/icons/button.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="0" fill="1" />
+        <initial-values>
+          <property name="text" value="Button" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JRadioButton" icon="/com/intellij/uiDesigner/icons/radioButton.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="RadioButton" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JCheckBox" icon="/com/intellij/uiDesigner/icons/checkBox.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="3" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="CheckBox" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JLabel" icon="/com/intellij/uiDesigner/icons/label.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="8" fill="0" />
+        <initial-values>
+          <property name="text" value="Label" />
+        </initial-values>
+      </item>
+      <item class="javax.swing.JTextField" icon="/com/intellij/uiDesigner/icons/textField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JPasswordField" icon="/com/intellij/uiDesigner/icons/passwordField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JFormattedTextField" icon="/com/intellij/uiDesigner/icons/formattedTextField.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1">
+          <preferred-size width="150" height="-1" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextArea" icon="/com/intellij/uiDesigner/icons/textArea.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTextPane" icon="/com/intellij/uiDesigner/icons/textPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JEditorPane" icon="/com/intellij/uiDesigner/icons/editorPane.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JComboBox" icon="/com/intellij/uiDesigner/icons/comboBox.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="2" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JTable" icon="/com/intellij/uiDesigner/icons/table.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JList" icon="/com/intellij/uiDesigner/icons/list.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="2" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTree" icon="/com/intellij/uiDesigner/icons/tree.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3">
+          <preferred-size width="150" height="50" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JTabbedPane" icon="/com/intellij/uiDesigner/icons/tabbedPane.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSplitPane" icon="/com/intellij/uiDesigner/icons/splitPane.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="3" hsize-policy="3" anchor="0" fill="3">
+          <preferred-size width="200" height="200" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JSpinner" icon="/com/intellij/uiDesigner/icons/spinner.png" removable="false" auto-create-binding="true" can-attach-label="true">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSlider" icon="/com/intellij/uiDesigner/icons/slider.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="8" fill="1" />
+      </item>
+      <item class="javax.swing.JSeparator" icon="/com/intellij/uiDesigner/icons/separator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="6" anchor="0" fill="3" />
+      </item>
+      <item class="javax.swing.JProgressBar" icon="/com/intellij/uiDesigner/icons/progressbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JToolBar" icon="/com/intellij/uiDesigner/icons/toolbar.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="6" anchor="0" fill="1">
+          <preferred-size width="-1" height="20" />
+        </default-constraints>
+      </item>
+      <item class="javax.swing.JToolBar$Separator" icon="/com/intellij/uiDesigner/icons/toolbarSeparator.png" removable="false" auto-create-binding="false" can-attach-label="false">
+        <default-constraints vsize-policy="0" hsize-policy="0" anchor="0" fill="1" />
+      </item>
+      <item class="javax.swing.JScrollBar" icon="/com/intellij/uiDesigner/icons/scrollbar.png" removable="false" auto-create-binding="true" can-attach-label="false">
+        <default-constraints vsize-policy="6" hsize-policy="0" anchor="0" fill="2" />
+      </item>
+    </group>
+  </component>
+</project>
\ No newline at end of file
